[pipeline:main]
pipeline = request_id docservice

[app:docservice]
use = egg:openprocurement.documentservice
auth.file = ${options['auth_file']}
pyramid.reload_templates = ${options['debug']}
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.debug_templates = ${options['debug']}
pyramid.default_locale_name = en
exclog.extra_info = true
storage = ${options['storage']}
dockey = ${options['dockey']}
apikeys = ${options['apikeys'].replace('\n','\0')}
dockeys = ${options['dockeys'].replace('\n','\0')}
{% if 'upload_host' in options %}upload_host = ${options['upload_host']}{% end %}
{% if 'get_host' in options %}get_host = ${options['get_host']}{% end %}
{% for item in options %}\
{% if item.startswith(options['storage']) %}\
${item} = ${options[item]}
{% end %}\
{% end %}\
{% if options['debug'] == 'true' %}\
filter-with = profile

[filter:profile]
use = egg:repoze.profile
log_filename = myapp.profile
cachegrind_filename = cachegrind.out.myapp
discard_first_request = true
path = /__profile__
flush_at_shutdown = true
unwind = false
{% end %}\
{% if options['debug'] == 'false' %}\
filter-with = proxy-prefix

[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
{% end %}
[filter:request_id]
paste.filter_factory = request_id_middleware.middleware:RequestIdMiddleware.factory
env_request_id = REQUEST_ID
resp_header_request_id = X-Request-ID

[server:main]
use = egg:chaussette
host = 0.0.0.0
port = 6543
backend = gevent

# Begin logging configuration

[loggers]
keys = root,openprocurement${',exc_logger' if 'exc_logger' in options else ''}

[handlers]
keys = console${',journal' if 'journal' in options else ''}${',statsite' if 'statsite' in options else ''}

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_openprocurement]
level = DEBUG
handlers = console{% if 'journal' in options %},journal{% end %}${',statsite' if 'statsite' in options else ''}
qualname = openprocurement

{% if 'statsite' in options %}
[handler_statsite]
level = DEBUG
class = statsdhandler.statsdhandler.StatsdHandler
args = ("${options['handler_conf']}",)
{% end %}


[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic
{% if 'exc_logger' in options %}
[logger_exc_logger]
level = ERROR
handlers = console{% if 'journal' in options %},journal{% end %}${',statsite' if 'statsite' in options else ''}
qualname = exc_logger
propagate = 0
{% end %}\
{% if 'journal' in options %}
[handler_journal]
class = ExtendedJournalHandler.ExtendedJournalHandler
args = ()
{% end %}
[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration
