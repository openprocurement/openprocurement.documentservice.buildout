[circus]
check_delay = 5
endpoint = ${options['endpoint']}
pubsub_endpoint = ${options['pubsub_endpoint']}
umask = 002
logoutput = ${parts.buildout.directory}/var/log/circus.log
{% if 'httpd' in options and options['httpd'] %}
httpd = 1
httpd_host = ${options['httpd_host']}
httpd_port = ${options['httpd_port']}
{% end %}
statsd = ${options['statsd']}

{% if options['service'] %}
[watcher:service]
cmd = ${parts.buildout.directory}/bin/chaussette --fd $(circus.sockets.web) --backend=gevent paste:${parts['service.ini'].output} --graceful-timeout=${options['graceful_timeout'] if 'graceful_timeout' in options else '60'} --spawn ${options['spawn'] if 'spawn' in options else '10000'}
numprocesses = ${options['numprocesses'] if 'numprocesses' in options else '1'}
use_sockets = True
priority = 90
stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = ${parts.buildout.directory}/var/log/service.stdout.log
stderr_stream.filename = ${parts.buildout.directory}/var/log/service.stderr.log
{% if 'log_size' in options %}
stdout_stream.max_bytes = ${options['log_size']}
stderr_stream.max_bytes = ${options['log_size']}
{% end %}
{% if 'backup_count' in options %}
stdout_stream.backup_count = ${options['backup_count']}
stderr_stream.backup_count = ${options['backup_count']}
{% end %}

[socket:web]
host = ${options['service_host']}
port = ${options['service_port']}

[plugin:service_resource]
use = circus.plugins.resource_watcher.ResourceWatcher
watcher = service
max_cpu = 95
max_mem = 400M
{% end %}

{% if options['service'] and 'service2' in options and options['service2'] %}
[watcher:service2]
cmd = ${parts.buildout.directory}/bin/chaussette --fd $(circus.sockets.web) --backend=gevent paste:${parts['service.ini'].output} --graceful-timeout=${options['graceful_timeout'] if 'graceful_timeout' in options else '60'} --spawn ${options['spawn'] if 'spawn' in options else '10000'}
numprocesses = ${options['numprocesses'] if 'numprocesses' in options else '1'}
use_sockets = True
priority = 80
warmup_delay = 1
stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = ${parts.buildout.directory}/var/log/service.stdout.log
stderr_stream.filename = ${parts.buildout.directory}/var/log/service.stderr.log
{% if 'log_size' in options %}
stdout_stream.max_bytes = ${options['log_size']}
stderr_stream.max_bytes = ${options['log_size']}
{% end %}
{% if 'backup_count' in options %}
stdout_stream.backup_count = ${options['backup_count']}
stderr_stream.backup_count = ${options['backup_count']}
{% end %}

[plugin:service2_resource]
use = circus.plugins.resource_watcher.ResourceWatcher
watcher = service2
max_cpu = 95
max_mem = 400M
{% end %}

{% if 'flapping' in options and options['flapping'] %}
[plugin:flapping]
use = circus.plugins.flapping.Flapping
max_retry = 5
{% end %}
